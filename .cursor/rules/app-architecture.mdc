# MC Shop Application Architecture

## Core Architecture Principles

### Backend: Server Actions First

- **No API Routes**: All backend logic uses Next.js server actions located in [src/server/actions/](mdc:src/server/actions)
- **Server Action Pattern**: Actions are async functions that handle form submissions and data mutations
- **"use server" Directive**: All server actions must include `"use server";` at the top to enable client component integration
- **Database Layer**: All database operations use Prisma ORM with schema at [prisma/schema.prisma](mdc:prisma/schema.prisma)
- **Authentication**: NextAuth.js configured in [src/server/auth/config.ts](mdc:src/server/auth/config.ts)
- **RCON Integration**: Minecraft server communication via [src/server/rcon.ts](mdc:src/server/rcon.ts)

### Frontend: Type-Safe React with ShadCN

- **Component Library**: Exclusively use ShadCN UI components from [src/components/ui/](mdc:src/components/ui)
- **Component Installation**: `npx shadcn@latest add [component-name]` for new components
- **Layout Structure**: Root layout in [src/app/layout.tsx](mdc:src/app/layout.tsx) with nested layouts
- **Navigation**: Centralized navigation component at [src/components/navigation.tsx](mdc:src/components/navigation.tsx)
- **Routing**: All routing methods (`Link`, `redirect`, `usePathname`, `useRouter`, `getPathname`) MUST be imported from [src/lib/i18n/routing.ts](mdc:src/lib/i18n/routing.ts)
- **Toast Notifications**: Using Sonner for user feedback
- **Form Handling**: React Hook Form with Zod validation throughout

### Internationalization with next-intl

- **Translation System**: next-intl for full internationalization support
- **Supported Locales**: English (`en`) and German (`de`) with German as default
- **Routing Configuration**: Internationalized routing configured in [src/lib/i18n/routing.ts](mdc:src/lib/i18n/routing.ts)
- **Navigation Methods**: All navigation utilities exported from routing configuration
- **Translation Files**: JSON translation files in [messages/](mdc:messages/) directory
- **Always Create Translations**: Every user-facing string must have both English and German translations

#### Required Translation Pattern

```typescript
// ✅ CORRECT: Using translations for all user-facing text
import { useTranslations } from 'next-intl';

export function ExampleComponent() {
  const t = useTranslations('ComponentName');

  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
      <button>{t('actions.save')}</button>
    </div>
  );
}

// ❌ INCORRECT: Hardcoded text strings
export function BadExample() {
  return (
    <div>
      <h1>Welcome</h1>
      <p>This is a description</p>
      <button>Save</button>
    </div>
  );
}
```

#### Translation File Structure

```json
// messages/en.json
{
  "ComponentName": {
    "title": "Welcome",
    "description": "This is a description",
    "actions": {
      "save": "Save",
      "cancel": "Cancel"
    }
  }
}

// messages/de.json
{
  "ComponentName": {
    "title": "Willkommen",
    "description": "Dies ist eine Beschreibung",
    "actions": {
      "save": "Speichern",
      "cancel": "Abbrechen"
    }
  }
}
```

#### Routing with next-intl

```typescript
// ✅ CORRECT: Import navigation from routing configuration
import { Link, redirect, usePathname, useRouter } from '~/lib/i18n/routing';

export function NavigationExample() {
  const router = useRouter();
  const pathname = usePathname();

  return (
    <nav>
      <Link href="/shops">{t('navigation.shops')}</Link>
      <Link href="/requests">{t('navigation.requests')}</Link>
      <button onClick={() => router.push('/profile')}>
        {t('navigation.profile')}
      </button>
    </nav>
  );
}

// ❌ INCORRECT: Using Next.js navigation directly
import { Link, useRouter } from 'next/navigation';
```

### Theming & Dark Mode System

- **Dark Mode Support**: Full dark mode implementation using CSS custom properties and `.dark` class toggle
- **Color System**: All colors use semantic CSS variables defined in [src/styles/globals.css](mdc:src/styles/globals.css)
- **Theme Colors**: Use semantic color classes instead of hardcoded colors for dark mode compatibility
- **Primary Color**: Tailwind CSS blue-600 (`oklch(0.546 0.245 262.881)`) used as primary brand color

#### Required Color Classes

All components MUST use these semantic color classes for proper dark mode support:

**Text Colors:**

```typescript
// Primary text and content
<h1 className="text-foreground">Main heading</h1>
<p className="text-foreground">Primary content text</p>

// Secondary/muted text
<p className="text-muted-foreground">Secondary information</p>
<span className="text-muted-foreground">Subtle details</span>

// Primary brand color
<button className="text-primary">Primary action</button>
<a className="text-primary hover:text-primary/80">Primary link</a>
```

**Background Colors:**

```typescript
// Main backgrounds
<div className="bg-background">Page background</div>
<div className="bg-card">Card background</div>
<div className="bg-popover">Popover background</div>

// Interactive elements
<button className="bg-primary text-primary-foreground">Primary button</button>
<div className="bg-secondary text-secondary-foreground">Secondary element</div>
<div className="bg-muted text-muted-foreground">Muted background</div>
```

**Border Colors:**

```typescript
// Standard borders
<div className="border border-border">Standard border</div>
<input className="border-input">Form input border</input>

// Focus states
<input className="focus:ring-ring">Focus ring</input>
```

#### Color Usage Examples

```typescript
// ✅ CORRECT: Semantic color usage
export function ExampleCard({ title, description, isActive }: Props) {
  return (
    <div className="bg-card border border-border rounded-lg p-4">
      <h3 className="text-foreground font-semibold">{title}</h3>
      <p className="text-muted-foreground text-sm mt-2">{description}</p>
      <button className={cn(
        "mt-4 px-4 py-2 rounded-md",
        isActive
          ? "bg-primary text-primary-foreground"
          : "bg-secondary text-secondary-foreground"
      )}>
        {isActive ? "Active" : "Inactive"}
      </button>
    </div>
  );
}

// ❌ INCORRECT: Hardcoded colors (breaks dark mode)
export function BadExample() {
  return (
    <div className="bg-white text-black border-gray-200">
      <h3 className="text-gray-900">Title</h3>
      <p className="text-gray-600">Description</p>
      <button className="bg-blue-600 text-white">Button</button>
    </div>
  );
}
```

#### Available Color Variables

```css
/* From src/styles/globals.css */
--color-background         /* Page/app background */
--color-foreground         /* Primary text color */
--color-card              /* Card backgrounds */
--color-card-foreground   /* Card text */
--color-popover           /* Popover/dropdown backgrounds */
--color-popover-foreground /* Popover text */
--color-primary           /* Brand primary color (blue) */
--color-primary-foreground /* Primary button text */
--color-secondary         /* Secondary backgrounds */
--color-secondary-foreground /* Secondary text */
--color-muted             /* Muted backgrounds */
--color-muted-foreground  /* Muted/secondary text */
--color-accent            /* Accent backgrounds */
--color-accent-foreground /* Accent text */
--color-destructive       /* Error/danger color */
--color-destructive-foreground /* Error text */
--color-border            /* Border color */
--color-input             /* Input border color */
--color-ring              /* Focus ring color */
```

## Application Features

### Core Systems

1. **Shop Management**: Create, edit, browse shops with item inventory
2. **Request System**: Users can create requests for items they need
3. **Offer System**: Users can make offers on requests with negotiation flow
4. **Search System**: Global search across shops, items, and players
5. **Item Management**: Comprehensive item database with image support
6. **User Authentication**: Multi-step registration with Minecraft integration
7. **Admin Tools**: Item import, testing utilities

### Request & Offer Workflow

1. **Request Creation**: Users create requests for items they need
2. **Offer Submission**: Other users can make offers with price and message
3. **Offer Management**: Accept/reject/withdraw offers with status tracking
4. **Negotiation**: Accepted offers move to negotiation phase
5. **Transaction**: Final completion through Minecraft server integration

## File Structure Patterns

### Server Actions (`src/server/actions/`)

```
actions/
├── item-actions.ts              # Item search and management
├── rcon-actions.ts              # Minecraft server communication
├── registration-actions.ts      # Multi-step user registration
├── search-actions.ts            # Global search functionality
├── shop-items.ts               # Shop inventory management
├── shops.ts                    # Shop CRUD operations
└── requests/                   # Request system actions
    ├── create-request.ts       # Request creation
    ├── update-request.ts       # Request updates
    ├── delete-request.ts       # Request deletion
    ├── get-requests.ts         # Request fetching
    ├── create-offer.ts         # Offer creation
    ├── update-offer.ts         # Offer status management
    ├── get-offers.ts           # Offer fetching
    └── index.ts               # Action exports
```

### Component Structure (`src/components/`)

```
components/
├── ui/                         # ShadCN UI components
├── auth/                       # Authentication components
├── navigation.tsx              # Main navigation
├── items/                      # Item-related components
├── shops/                      # Shop management components
├── requests/                   # Request system components
│   ├── request-details.tsx     # Request detail view
│   ├── offer-form.tsx          # Offer creation form
│   ├── offer-list.tsx          # Offer display and management
│   └── index.ts               # Component exports
└── search/                     # Search functionality
    ├── global-search-bar.tsx   # Main search interface
    ├── search-item-result.tsx  # Search result display
    └── index.ts               # Search exports
```

### Validation Schemas (`src/lib/validations/`)

```
validations/
├── auth.ts      # Authentication and registration schemas
├── request.ts   # Request and offer validation schemas
├── search.ts    # Search parameter validation
└── shop.ts      # Shop and shop item validation schemas
```

### Types (`src/lib/types/`)

```
types/
├── auth.ts      # Authentication-related types
├── request.ts   # Request and offer types with database relations
├── search.ts    # Search result and parameter types
└── shop.ts      # Shop management types
```

### Hooks (`src/hooks/` & `src/lib/hooks/`)

```
hooks/
├── use-registration.ts         # Multi-step registration flow
├── use-global-search.ts        # Global search functionality
├── use-image-fallback.ts       # Image loading with fallbacks
├── use-search-keyboard.ts      # Keyboard navigation for search
└── lib/hooks/
    ├── use-request-data.ts     # Request data management
    ├── use-request-form.ts     # Request form handling
    └── use-shop-management.ts  # Shop CRUD operations
```

### Pages (`src/app/`)

```
app/
├── page.tsx                    # Home page
├── layout.tsx                  # Root layout
├── auth/                       # Authentication pages
│   ├── login/page.tsx         # Login page
│   ├── register/page.tsx      # Registration page
│   └── error/page.tsx         # Auth error handling
├── shops/                      # Shop management
│   ├── page.tsx              # Shop listing
│   ├── browse/page.tsx       # Public shop browsing
│   ├── new/page.tsx          # Shop creation
│   └── [id]/                 # Individual shop pages
├── items/page.tsx             # Item management
├── requests/                  # Request system
│   ├── page.tsx              # Request listing
│   ├── new/page.tsx          # Request creation
│   └── [id]/                 # Individual request pages
│       ├── page.tsx          # Request details with offers
│       └── edit/page.tsx     # Request editing
└── admin/                     # Administrative functions
    └── items/                # Item management tools
```

### Internationalization (`src/lib/i18n/`)

```
i18n/
├── config.ts     # next-intl configuration
└── routing.ts    # Routing configuration with locale support
```

### Translation Files (`messages/`)

```
messages/
├── en.json      # English translations
└── de.json      # German translations
```

## Server Action Patterns

### Standard Action Structure with "use server"

```typescript
"use server";

import { auth } from "~/server/auth";
import { db } from "~/server/db";
import { actionSchema } from "~/lib/validations/example";

export async function exampleAction(formData: FormData) {
  // 1. Validate input
  const validatedFields = actionSchema.safeParse({
    field: formData.get("field"),
  });

  if (!validatedFields.success) {
    return { success: false, error: "Invalid input" };
  }

  // 2. Check authentication
  const session = await auth();
  if (!session?.user) {
    return { success: false, error: "Unauthorized" };
  }

  // 3. Database operation
  try {
    const result = await db.example.create({
      data: validatedFields.data,
    });
    return { success: true, data: result };
  } catch (error) {
    return { success: false, error: "Database error" };
  }
}
```

### Client-Server Component Integration

```typescript
// Server Component (Page)
import { exampleAction } from "~/server/actions/example";

export default function ExamplePage() {
  return (
    <ClientComponent exampleAction={exampleAction} />
  );
}

// Client Component
interface Props {
  exampleAction: (formData: FormData) => Promise<ActionResult>;
}

export function ClientComponent({ exampleAction }: Props) {
  // Use server action as prop
}
```

## Database Schema Patterns

### Core Models

- **User**: Authentication with Minecraft UUID integration
- **Shop**: User-owned shops with location and description
- **ShopItem**: Items available in shops with pricing
- **Item**: Master item database with image paths
- **Request**: User requests for items with status tracking
- **RequestOffer**: Offers made on requests with negotiation flow
- **RequestNegotiation**: Accepted offers in negotiation phase

### Relationship Patterns

```prisma
// User owns multiple shops and requests
User {
  shops     Shop[]
  requests  Request[]
  offers    RequestOffer[]
}

// Shop contains multiple items
Shop {
  items     ShopItem[]
  owner     User
}

// Request can have multiple offers
Request {
  offers       RequestOffer[]
  negotiations RequestNegotiation[]
  requester    User
}
```

## Search System Architecture

### Global Search Features

- **Unified Search**: Single interface for shops, items, and players
- **Keyboard Navigation**: Arrow keys and enter for navigation
- **Real-time Results**: Debounced search with instant feedback
- **Result Categorization**: Grouped results by type
- **Navigation Integration**: Search results link to relevant pages

### Search Implementation

```typescript
// Search hook with debouncing
const { results, isLoading } = useGlobalSearch(query, {
  debounceMs: 300,
  minQueryLength: 2,
});

// Search action with multiple result types
export async function unifiedSearch(query: string) {
  const [shops, items, players] = await Promise.all([
    searchShops(query),
    searchItems(query),
    searchPlayers(query),
  ]);

  return { shops, items, players };
}
```

## Request & Offer System Patterns

### Request Lifecycle

1. **OPEN**: Accepting offers
2. **IN_NEGOTIATION**: Offer accepted, negotiating details
3. **COMPLETED**: Transaction finished
4. **CANCELLED**: Request cancelled by owner

### Offer Management

```typescript
// Offer creation with validation
export async function createOffer(formData: FormData) {
  // Prevent self-offers and duplicate offers
  // Validate request is still open
  // Create offer with PENDING status
}

// Offer status updates with transactions
export async function updateOffer(formData: FormData) {
  await db.$transaction(async (tx) => {
    // Update offer status
    // If accepted: reject other offers, create negotiation
    // Update request status accordingly
  });
}
```

## Image Management System

### Item Images

- **Multiple Resource Packs**: Default and Sphax texture support
- **Fallback System**: Graceful degradation to default images
- **Dynamic Loading**: Images loaded based on user preference
- **Path Structure**: `public/items/{pack}/{namespace}__{item}.png`

### Image Utilities

```typescript
// Image path resolution with fallbacks
export function getItemImagePath(
  itemId: string,
  resourcePack: "default" | "sphax" = "default",
): string {
  // Handle namespace and item ID parsing
  // Return appropriate image path with fallbacks
}
```

## Form Patterns with React Hook Form

### Standard Form Setup

```typescript
const form = useForm<SchemaType>({
  resolver: zodResolver(validationSchema),
  defaultValues: {
    /* defaults */
  },
});

const onSubmit = async (data: SchemaType) => {
  const formData = new FormData();
  Object.entries(data).forEach(([key, value]) => {
    formData.append(key, value.toString());
  });

  const result = await serverAction(formData);

  if (result.success) {
    toast.success("Success message");
  } else {
    toast.error(result.error);
  }
};
```

## Development Best Practices

### Code Organization

1. **Server Actions**: Always include `"use server"` directive
2. **Component Props**: Pass server actions as props to client components
3. **Type Safety**: Full TypeScript coverage with proper type definitions
4. **Validation**: Zod schemas for both client and server validation
5. **Error Handling**: Consistent error response patterns
6. **Loading States**: Proper loading feedback in all interactions
7. **Internationalization**: All routing must use [src/lib/i18n/routing.ts](mdc:src/lib/i18n/routing.ts) exports
8. **Translations**: Every user-facing string must have English and German translations

### Database Best Practices

1. **Transactions**: Use Prisma transactions for complex operations
2. **Relations**: Leverage Prisma's relation system for data fetching
3. **Migrations**: Always test migrations in development first
4. **Indexing**: Proper database indexes for search performance

### UI/UX Patterns

1. **Toast Notifications**: Consistent feedback using Sonner
2. **Loading States**: Skeleton loaders and disabled states
3. **Form Validation**: Real-time validation with helpful error messages
4. **Responsive Design**: Mobile-first approach with Tailwind CSS
5. **Accessibility**: Proper ARIA labels and keyboard navigation
6. **Dark Mode Compatibility**: All components must use semantic color classes (`text-foreground`, `text-muted-foreground`, `text-primary`, etc.)
7. **Color Consistency**: Never use hardcoded Tailwind colors (e.g., `text-gray-900`, `bg-white`) - always use theme variables
8. **Primary Actions**: Use `text-primary` and `bg-primary` for primary buttons, links, and brand elements

## Adding New Features

### Feature Development Checklist

1. **Database Schema**: Update [prisma/schema.prisma](mdc:prisma/schema.prisma) if needed
2. **Types**: Create TypeScript interfaces in [src/lib/types/](mdc:src/lib/types)
3. **Validation**: Add Zod schemas in [src/lib/validations/](mdc:src/lib/validations)
4. **Server Actions**: Implement with `"use server"` in [src/server/actions/](mdc:src/server/actions)
5. **Components**: Build UI using ShadCN components with semantic color classes
6. **Translations**: Add English and German translations to [messages/](mdc:messages/) files
7. **Routing**: Use navigation utilities from [src/lib/i18n/routing.ts](mdc:src/lib/i18n/routing.ts)
8. **Dark Mode Testing**: Verify components work in both light and dark themes
9. **Pages**: Create routes in [src/app/](mdc:src/app)
10. **Hooks**: Custom hooks for complex state management
11. **Testing**: Ensure proper error handling and edge cases

### Integration Patterns

- **Authentication**: Always check user sessions in server actions
- **Permissions**: Validate user permissions for data access
- **Error Boundaries**: Implement proper error handling at component level
- **SEO**: Use proper metadata and structured data where applicable
- **Internationalization**: All navigation must use routing.ts exports, all text must be translated

### Internationalization Best Practices

1. **Translation Keys**: Use descriptive, nested keys for better organization
2. **Locale-First Design**: Design with multiple languages in mind from the start
3. **Text Length Considerations**: Account for German text being typically 30% longer
4. **Date/Number Formatting**: Use next-intl's formatting utilities for locale-specific formats
5. **Pluralization**: Use next-intl's plural rules for proper grammar
6. **Translation Maintenance**: Keep translation files synchronized across all locales

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model MinecraftItem {
  id          String   @id // The minecraft item ID (e.g., "ars_nouveau:abjuration_essence")
  nameEn      String   // English name
  nameDe      String   // German name  
  filename    String   // Image filename
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shopItems   ShopItem[]
  
  // Optimized indexes for search
  @@index([nameEn])
  @@index([nameDe]) 
  @@index([id])
}

model Shop {
  id            String    @id @default(cuid())
  name          String    // Shop name
  description   String?   // Optional description
  
  // Location in Minecraft world
  locationX     Int?      // X coordinate
  locationY     Int?      // Y coordinate  
  locationZ     Int?      // Z coordinate
  
  // Future fields
  imageUrl      String?   // Shop image URL
  isActive      Boolean   @default(true)
  
  // Metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  ownerId       String    // References User.id
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  shopItems     ShopItem[]
  
  // Indexes
  @@index([ownerId])
    @@index([name])
  @@index([isActive])
  @@index([locationX, locationY, locationZ]) // For location-based searches
}

model ShopItem {
  id            String        @id @default(cuid())
  shopId        String
  itemId        String        // References MinecraftItem.id
  
  // Pricing and availability
  price         Float
  amount        Int           @default(1) // How many items are sold as a bundle (e.g., 32 iron ore)
  currency      String        @default("emeralds") // "emeralds" or "emerald_blocks"
  isAvailable   Boolean       @default(true)
  
  // Metadata
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  shop          Shop          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  item          MinecraftItem @relation(fields: [itemId], references: [id])
  
  // Constraints and indexes
  @@unique([shopId, itemId]) // Prevent duplicate items in same shop
  @@index([shopId])
  @@index([itemId])
  @@index([price])
  @@index([isAvailable])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    mcUsername       String    @unique // Minecraft username - primary identifier
    mcUUID           String?   @unique // Minecraft player UUID - obtained via RCON during registration
    password         String    // Hashed password
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    
    // NextAuth fields (kept for compatibility, but not used)
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    // Shop relations
    shops         Shop[]    // A user can have multiple shops
}

// Model for storing temporary OTP codes during registration
model RegistrationOTP {
    id         String   @id @default(cuid())
    mcUsername String   @unique
    otpCode    String   // The 6-digit OTP code
    expiresAt  DateTime // When the OTP expires
    createdAt  DateTime @default(now())
    verified   Boolean  @default(false) // Whether the OTP has been verified
    
    @@index([mcUsername])
    @@index([otpCode])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

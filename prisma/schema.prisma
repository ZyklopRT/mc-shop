// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model MinecraftItem {
  id          String   @id // The minecraft item ID (e.g., "ars_nouveau:abjuration_essence")
  nameEn      String   // English name
  nameDe      String   // German name  
  filename    String   // Image filename
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  shopItems   ShopItem[]
  requests    Request[]
  
  // Optimized indexes for search
  @@index([nameEn])
  @@index([nameDe]) 
  @@index([id])
}

model Shop {
  id            String    @id @default(cuid())
  name          String    // Shop name
  description   String?   // Optional description
  
  // Location in Minecraft world
  locationX     Int?      // X coordinate
  locationY     Int?      // Y coordinate  
  locationZ     Int?      // Z coordinate
  
  // Future fields
  imageUrl      String?   // Shop image URL
  isActive      Boolean   @default(true)
  
  // Metadata
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  ownerId       String    // References User.id
  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  shopItems     ShopItem[]
  
  // Indexes
  @@index([ownerId])
    @@index([name])
  @@index([isActive])
  @@index([locationX, locationY, locationZ]) // For location-based searches
}

model ShopItem {
  id            String        @id @default(cuid())
  shopId        String
  itemId        String        // References MinecraftItem.id
  
  // Pricing and availability
  price         Float
  amount        Int           @default(1) // How many items are sold as a bundle (e.g., 32 iron ore)
  currency      String        @default("emeralds") // "emeralds" or "emerald_blocks"
  isAvailable   Boolean       @default(true)
  
  // Metadata
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  // Relations
  shop          Shop          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  item          MinecraftItem @relation(fields: [itemId], references: [id])
  
  // Constraints and indexes
  @@unique([shopId, itemId]) // Prevent duplicate items in same shop
  @@index([shopId])
  @@index([itemId])
  @@index([price])
  @@index([isAvailable])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String    @id @default(cuid())
    mcUsername       String    @unique // Minecraft username - primary identifier
    mcUUID           String?   @unique // Minecraft player UUID - obtained via RCON during registration
    password         String    // Hashed password
    isAdmin          Boolean   @default(false) // Admin privileges for modpack management
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    
    // NextAuth fields (kept for compatibility, but not used)
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    // Shop relations
    shops         Shop[]    // A user can have multiple shops
    
    // Request system relations
    requests               Request[]               @relation("UserRequests")
    offers                 RequestOffer[]          @relation("UserOffers")
    negotiationMessages    NegotiationMessage[]    @relation("NegotiationMessages")
    
    // Modpack system relations
    modpacks               Modpack[]               @relation("UserModpacks")
    modpackDownloads       ModpackDownload[]       @relation("UserModpackDownloads")
}

// Model for storing temporary OTP codes during registration
model RegistrationOTP {
    id         String   @id @default(cuid())
    mcUsername String   @unique
    otpCode    String   // The 6-digit OTP code
    expiresAt  DateTime // When the OTP expires
    createdAt  DateTime @default(now())
    verified   Boolean  @default(false) // Whether the OTP has been verified
    
    @@index([mcUsername])
    @@index([otpCode])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Request System Models

model Request {
  id             String          @id @default(cuid())
  title          String          // Brief title of the request
  description    String          // Detailed description
  requestType    RequestType     // ITEM or GENERAL
  
  // Item-specific fields
  itemId         String?         // References MinecraftItem.id (nullable for GENERAL requests)
  itemQuantity   Int?            // How many items requested
  
  // Pricing
  suggestedPrice Float?          // Suggested reward/price
  currency       String          @default("emeralds") // "emeralds" or "emerald_blocks"
  
  // Request status
  status         RequestStatus   @default(OPEN)
  
  // Relations
  requesterId    String          // Who made the request
  requester      User            @relation("UserRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  
  // Metadata
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  completedAt    DateTime?       // When the request was fulfilled
  
  // Relations
  item           MinecraftItem?  @relation(fields: [itemId], references: [id])
  offers         RequestOffer[]
  negotiation    RequestNegotiation?
  
  @@index([requesterId])
  @@index([status])
  @@index([requestType])
  @@index([itemId])
  @@index([createdAt])
}

model RequestOffer {
  id             String       @id @default(cuid())
  requestId      String
  offererId      String       // Who made the offer
  
  // Offer details
  offeredPrice   Float?       // Counter-offer price (null means accepting original)
  currency       String       @default("emeralds") // "emeralds" or "emerald_blocks"
  message        String?      // Optional message with the offer
  status         OfferStatus  @default(PENDING)
  
  // Metadata
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  request        Request      @relation(fields: [requestId], references: [id], onDelete: Cascade)
  offerer        User         @relation("UserOffers", fields: [offererId], references: [id], onDelete: Cascade)
  
  @@index([requestId])
  @@index([offererId])
  @@index([status])
}

model RequestNegotiation {
  id               String              @id @default(cuid())
  requestId        String              @unique
  acceptedOfferId  String?             // Which offer was accepted
  finalPrice       Float?              // Final agreed price
  status           NegotiationStatus   @default(IN_PROGRESS)
  
  // Metadata
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  completedAt      DateTime?
  
  // Relations
  request          Request             @relation(fields: [requestId], references: [id], onDelete: Cascade)
  messages         NegotiationMessage[]
}

model NegotiationMessage {
  id             String             @id @default(cuid())
  negotiationId  String
  senderId       String             // Who sent the message
  messageType    MessageType        // OFFER, COUNTER_OFFER, ACCEPT, REJECT, MESSAGE
  content        String             // Message content
  priceOffer     Float?             // Price if this is an offer/counter-offer
  
  createdAt      DateTime           @default(now())
  
  // Relations
  negotiation    RequestNegotiation @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
  sender         User               @relation("NegotiationMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([negotiationId])
  @@index([senderId])
  @@index([createdAt])
}

// Request System Enums
enum RequestType {
  ITEM     // Request for specific Minecraft items
  GENERAL  // General text request
}

enum RequestStatus {
  OPEN        // Available for offers
  IN_NEGOTIATION  // Actively being negotiated
  ACCEPTED    // Agreement reached, pending completion
  COMPLETED   // Fulfilled and closed
  CANCELLED   // Cancelled by requester
}

enum OfferStatus {
  PENDING     // Waiting for response
  ACCEPTED    // Accepted by requester
  REJECTED    // Rejected by requester
  WITHDRAWN   // Withdrawn by offerer
}

enum NegotiationStatus {
  IN_PROGRESS // Still negotiating
  AGREED      // Both parties agreed
  FAILED      // Negotiation failed
}

enum MessageType {
  OFFER         // Initial offer
  COUNTER_OFFER // Counter-offer with different price
  ACCEPT        // Accept the current offer
  REJECT        // Reject the current offer
  MESSAGE       // General message
}

// Modpack System Models

model Modpack {
  id            String   @id @default(cuid())
  name          String
  description   String?
  version       String
  minecraftVersion String @default("1.21") // Currently targeting MC 1.21
  modLoader     ModLoader @default(NEOFORGE) // Primary focus on NeoForge
  modLoaderVersion String?  // Mod loader version requirement
  releaseDate   DateTime @default(now())
  isActive      Boolean  @default(true)
  isFeatured    Boolean  @default(false)
  isPublic      Boolean  @default(true)
  downloadCount Int      @default(0)
  filePath      String   // Path to the modpack ZIP file
  fileSize      Int      // File size in bytes
  checksum      String   // SHA-256 checksum
  releaseNotes  String?  // Custom release notes

  mods          Mod[]
  changelogs    ModpackChangelog[]
  downloads     ModpackDownload[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdBy     User     @relation("UserModpacks", fields: [createdById], references: [id])
  createdById   String

  @@unique([name, version])
  @@index([isActive, isFeatured])
  @@index([modLoader, minecraftVersion])
  @@index([createdById])
  @@index([releaseDate])
}

model Mod {
  id            String   @id @default(cuid())
  modId         String   // Mod's internal ID from metadata
  name          String
  displayName   String?
  version       String
  author        String?
  description   String?
  homepage      String?
  logoPath      String?  // Path to extracted logo
  fileName      String   // Original .jar filename
  fileSize      Int
  checksum      String   // SHA-256 checksum
  modLoader     ModLoader @default(NEOFORGE) // Detected mod loader
  modLoaderVersion String? // Required mod loader version
  minecraftVersion String? // Compatible Minecraft version
  side          ModSide  @default(BOTH) // CLIENT, SERVER, BOTH
  dependencies  Json?    // Dependency information (loader-agnostic format)

  modpack       Modpack  @relation(fields: [modpackId], references: [id], onDelete: Cascade)
  modpackId     String

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([modpackId, modId])
  @@index([modLoader, minecraftVersion])
  @@index([modpackId])
}

model ModpackChangelog {
  id            String      @id @default(cuid())
  modpack       Modpack     @relation(fields: [modpackId], references: [id], onDelete: Cascade)
  modpackId     String
  changeType    ChangeType  // ADDED, UPDATED, REMOVED, UNCHANGED
  modId         String
  modName       String
  oldVersion    String?
  newVersion    String?
  description   String?
  impact        ChangeImpact @default(MINOR) // MAJOR, MINOR, PATCH

  createdAt     DateTime @default(now())

  @@index([modpackId, changeType])
  @@index([modpackId])
}

model ModpackDownload {
  id            String   @id @default(cuid())
  modpack       Modpack  @relation(fields: [modpackId], references: [id], onDelete: Cascade)
  modpackId     String
  user          User?    @relation("UserModpackDownloads", fields: [userId], references: [id])
  userId        String?
  ipAddress     String
  userAgent     String?
  downloadedAt  DateTime @default(now())
  completed     Boolean  @default(false)

  @@index([modpackId, downloadedAt])
  @@index([modpackId])
}

// Modpack System Enums
enum ModLoader {
  NEOFORGE     // Primary implementation
  FORGE        // Future support
  FABRIC       // Future support
  QUILT        // Future support
  VANILLA      // Future support
}

enum ModSide {
  CLIENT
  SERVER
  BOTH
}

enum ChangeType {
  ADDED
  UPDATED
  REMOVED
  UNCHANGED
}

enum ChangeImpact {
  MAJOR
  MINOR
  PATCH
}
